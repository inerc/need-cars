<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '18ea4367dd765ae94725fc4530b0a787' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"ajaxSubmitPost","description":"Creates the JavaScript necessary for the majority of Submit buttons using the POST method. Allows for additional Javascript to be run before and after the Submit is complete.","editor_type":0,"category":0,"cache_type":0,"snippet":"<script type=\\"text\\/javascript\\">\\n$(\'[[+cssButton]]\').click(function(event)\\n{   [[+jsPreSubmit]]\\n    $.ajax({\\n        type:\'POST\',\\n        url:\'[[+toURL]]\', \\n        data:$(\'[[+cssForm]]\').serialize(), \\n\\t\\tsuccess:function(data)\\n        {   [[+jsPreSuccess]]\\n            $(\'[[+toCSSBox]]\').html(data);   \\n            [[+jsPostSuccess]]\\n        }, \\n\\t\\terror:function(XMLHttpRequest, textStatus, errorThrown)\\n        {   [[+jsPreError]]\\n            $(\'[[+toCSSBox]]\').html(errorThrown + \': \' + this.url);  \\n            [[+jsPostError]]\\n        },\\n\\t\\tdataType:\'html\'\\n\\t});\\n    [[+jsPostSubmit]]\\n});\\n<\\/script>","locked":0,"properties":"a:9:{s:9:\\"cssButton\\";a:7:{s:4:\\"name\\";s:9:\\"cssButton\\";s:4:\\"desc\\";s:97:\\"The CSS Selector of the \\"Button\\" to listen to. (Note: This does not actually have to be a Button)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"#submit\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:6:\\"Button\\";}s:6:\\"cssBox\\";a:7:{s:4:\\"name\\";s:6:\\"cssBox\\";s:4:\\"desc\\";s:113:\\"The CSS Selector to place the results of the POST to. This will be the same for successful POSTs or failed POSTs.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"#box\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:9:\\"Container\\";}s:11:\\"jsPostError\\";a:7:{s:4:\\"name\\";s:11:\\"jsPostError\\";s:4:\\"desc\\";s:100:\\"The JavaScript or Chunk of JavaScript to run when a POST fails, and after the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:12:\\"jsPostSubmit\\";a:7:{s:4:\\"name\\";s:12:\\"jsPostSubmit\\";s:4:\\"desc\\";s:128:\\"The JavaScript or Chunk of JavaScript to run after submitting the POST via ajax. This is run whether the ajax succeeds or fails.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:13:\\"jsPostSuccess\\";a:7:{s:4:\\"name\\";s:13:\\"jsPostSuccess\\";s:4:\\"desc\\";s:103:\\"The JavaScript or Chunk of JavaScript to run when a POST succeeds, and after the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:10:\\"jsPreError\\";a:7:{s:4:\\"name\\";s:10:\\"jsPreError\\";s:4:\\"desc\\";s:101:\\"The JavaScript or Chunk of JavaScript to run when a POST fails, but before the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:11:\\"jsPreSubmit\\";a:7:{s:4:\\"name\\";s:11:\\"jsPreSubmit\\";s:4:\\"desc\\";s:81:\\"The JavaScript or Chunk of JavaScript to run before submitting the POST via ajax.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:12:\\"jsPreSuccess\\";a:7:{s:4:\\"name\\";s:12:\\"jsPreSuccess\\";s:4:\\"desc\\";s:104:\\"The JavaScript or Chunk of JavaScript to run when a POST succeeds, but before the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:5:\\"toURL\\";a:7:{s:4:\\"name\\";s:5:\\"toURL\\";s:4:\\"desc\\";s:37:\\"The URL to submit the POSTed form to.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"#\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:3:\\"URL\\";}}","static":0,"static_file":"","content":"<script type=\\"text\\/javascript\\">\\n$(\'[[+cssButton]]\').click(function(event)\\n{   [[+jsPreSubmit]]\\n    $.ajax({\\n        type:\'POST\',\\n        url:\'[[+toURL]]\', \\n        data:$(\'[[+cssForm]]\').serialize(), \\n\\t\\tsuccess:function(data)\\n        {   [[+jsPreSuccess]]\\n            $(\'[[+toCSSBox]]\').html(data);   \\n            [[+jsPostSuccess]]\\n        }, \\n\\t\\terror:function(XMLHttpRequest, textStatus, errorThrown)\\n        {   [[+jsPreError]]\\n            $(\'[[+toCSSBox]]\').html(errorThrown + \': \' + this.url);  \\n            [[+jsPostError]]\\n        },\\n\\t\\tdataType:\'html\'\\n\\t});\\n    [[+jsPostSubmit]]\\n});\\n<\\/script>"}',
        'guid' => '067b3d16b8a0a902863dea7b786b8051',
        'native_key' => 1,
        'signature' => '404a59078cdf68899dc7d37fce7fb6fc',
      ),
      '89f8b74da14ecc2df42f4a363546e47d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"ajaxLazyLoad","description":"jQuery Lazy Loader - Loads a AJAX Partial HTML from the &fromURL and automatically adds it to the HTML Element of &toSelector. Allows for additional Javascript to be run on success or error with &onSuccess and &onError.","editor_type":0,"category":0,"cache_type":0,"snippet":"<script type=\\"text\\/javascript\\">\\n$(document).ready(function()\\n{   $.ajax(\\n    {   type:\'GET\',\\n        url:\'[[+fromURL]]\',\\n        success:function(data)\\n        {\\/\\/Send to the specified CSS Selector\\n            [[+preSuccess:notempty=`[[+preSuccess]]`]]\\n            $(\'[[+toSelector]]\').html(data);\\n            [[+postSuccess:notempty=`[[+postSuccess]]`]]\\n        }, \\n        error:function(XMLHttpRequest, textStatus, errorThrown)\\n        {\\/\\/Send to the specified CSS Selector\\n            [[+preError:notempty=`[[+preError]]`]]\\n    \\t    $(\'[[+toSelector]]\').html(errorThrown + \': \' + this.url);\\n            [[+postError:notempty=`[[+postError]]`]]\\n        }, \\n    \\tdataType:\'html\'\\n\\t});\\n});\\n<\\/script>","locked":0,"properties":"a:6:{s:10:\\"toSelector\\";a:7:{s:4:\\"name\\";s:10:\\"toSelector\\";s:4:\\"desc\\";s:55:\\"The CSS Selector to load the AJAX Partial HTML page to.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"#Lazy\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:14:\\"AJAX Container\\";}s:9:\\"postError\\";a:7:{s:4:\\"name\\";s:9:\\"postError\\";s:4:\\"desc\\";s:91:\\"The javascript to run when an AJAX Request has failed and after the user has been notified.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:10:\\"Post Hooks\\";}s:11:\\"postSuccess\\";a:7:{s:4:\\"name\\";s:11:\\"postSuccess\\";s:4:\\"desc\\";s:79:\\"The JavaScript to run when an AJAX Request succeeds after the page has updated.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:10:\\"Post Hooks\\";}s:8:\\"preError\\";a:7:{s:4:\\"name\\";s:8:\\"preError\\";s:4:\\"desc\\";s:83:\\"The javascript to run when an AJAX Request fails before the user has been notified.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:9:\\"Pre Hooks\\";}s:10:\\"preSuccess\\";a:7:{s:4:\\"name\\";s:10:\\"preSuccess\\";s:4:\\"desc\\";s:85:\\"The javascript to run when an AJAX Request succeeds before the page has been updated.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:9:\\"Pre Hooks\\";}s:7:\\"fromURL\\";a:7:{s:4:\\"name\\";s:7:\\"fromURL\\";s:4:\\"desc\\";s:39:\\"The URL of the AJAX Page to lazily load\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"\\/\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:3:\\"URL\\";}}","static":0,"static_file":"","content":"<script type=\\"text\\/javascript\\">\\n$(document).ready(function()\\n{   $.ajax(\\n    {   type:\'GET\',\\n        url:\'[[+fromURL]]\',\\n        success:function(data)\\n        {\\/\\/Send to the specified CSS Selector\\n            [[+preSuccess:notempty=`[[+preSuccess]]`]]\\n            $(\'[[+toSelector]]\').html(data);\\n            [[+postSuccess:notempty=`[[+postSuccess]]`]]\\n        }, \\n        error:function(XMLHttpRequest, textStatus, errorThrown)\\n        {\\/\\/Send to the specified CSS Selector\\n            [[+preError:notempty=`[[+preError]]`]]\\n    \\t    $(\'[[+toSelector]]\').html(errorThrown + \': \' + this.url);\\n            [[+postError:notempty=`[[+postError]]`]]\\n        }, \\n    \\tdataType:\'html\'\\n\\t});\\n});\\n<\\/script>"}',
        'guid' => '3d7dfb165b32cb74e709ea7f549ccce7',
        'native_key' => 2,
        'signature' => 'd7bb063501a46dd3a3098d7c3096a087',
      ),
      '42342872ab9fc0175662550854946102' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"ajaxSubmitGet","description":"Creates the JavaScript necessary for the majority of Submit buttons using the GET method. Allows for additional Javascript to be run before and after the Submit is complete.","editor_type":0,"category":0,"cache_type":0,"snippet":"<script type=\\"text\\/javascript\\">\\n$(\'[[+cssButton]]\').click(function(event)\\n{   [[+jsPreSubmit]]\\n    $.ajax({\\n        type:\'GET\',\\n        url:\'[[+toURL]]\', \\n        data:$(\'[[+cssForm]]\').serialize(), \\n\\t\\tsuccess:function(data)\\n        {   [[+jsPreSuccess]]\\n            $(\'[[+toCSSBox]]\').html(data);   \\n            [[+jsPostSuccess]]\\n        }, \\n\\t\\terror:function(XMLHttpRequest, textStatus, errorThrown)\\n        {   [[+jsPreError]]\\n            $(\'[[+toCSSBox]]\').html(errorThrown + \': \' + this.url);  \\n            [[+jsPostError]]\\n        },\\n\\t\\tdataType:\'html\'\\n\\t});\\n    [[+jsPostSubmit]]\\n});\\n<\\/script>","locked":0,"properties":"a:9:{s:9:\\"cssButton\\";a:7:{s:4:\\"name\\";s:9:\\"cssButton\\";s:4:\\"desc\\";s:97:\\"The CSS Selector of the \\"Button\\" to listen to. (Note: This does not actually have to be a Button)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"#submit\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:6:\\"Button\\";}s:6:\\"cssBox\\";a:7:{s:4:\\"name\\";s:6:\\"cssBox\\";s:4:\\"desc\\";s:110:\\"The CSS Selector to place the results of the GET to. This will be the same for successful GETs or failed GETs.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"#box\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:9:\\"Container\\";}s:11:\\"jsPostError\\";a:7:{s:4:\\"name\\";s:11:\\"jsPostError\\";s:4:\\"desc\\";s:99:\\"The JavaScript or Chunk of JavaScript to run when a GET fails, and after the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:12:\\"jsPostSubmit\\";a:7:{s:4:\\"name\\";s:12:\\"jsPostSubmit\\";s:4:\\"desc\\";s:127:\\"The JavaScript or Chunk of JavaScript to run after submitting the GET via ajax. This is run whether the ajax succeeds or fails.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:13:\\"jsPostSuccess\\";a:7:{s:4:\\"name\\";s:13:\\"jsPostSuccess\\";s:4:\\"desc\\";s:102:\\"The JavaScript or Chunk of JavaScript to run when a GET succeeds, and after the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:10:\\"jsPreError\\";a:7:{s:4:\\"name\\";s:10:\\"jsPreError\\";s:4:\\"desc\\";s:100:\\"The JavaScript or Chunk of JavaScript to run when a GET fails, but before the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:11:\\"jsPreSubmit\\";a:7:{s:4:\\"name\\";s:11:\\"jsPreSubmit\\";s:4:\\"desc\\";s:80:\\"The JavaScript or Chunk of JavaScript to run before submitting the GET via ajax.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:12:\\"jsPreSuccess\\";a:7:{s:4:\\"name\\";s:12:\\"jsPreSuccess\\";s:4:\\"desc\\";s:103:\\"The JavaScript or Chunk of JavaScript to run when a GET succeeds, but before the results are displayed.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Hooks\\";}s:5:\\"toURL\\";a:7:{s:4:\\"name\\";s:5:\\"toURL\\";s:4:\\"desc\\";s:37:\\"The URL to submit the GET Request to.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"#\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:3:\\"URL\\";}}","static":0,"static_file":"","content":"<script type=\\"text\\/javascript\\">\\n$(\'[[+cssButton]]\').click(function(event)\\n{   [[+jsPreSubmit]]\\n    $.ajax({\\n        type:\'GET\',\\n        url:\'[[+toURL]]\', \\n        data:$(\'[[+cssForm]]\').serialize(), \\n\\t\\tsuccess:function(data)\\n        {   [[+jsPreSuccess]]\\n            $(\'[[+toCSSBox]]\').html(data);   \\n            [[+jsPostSuccess]]\\n        }, \\n\\t\\terror:function(XMLHttpRequest, textStatus, errorThrown)\\n        {   [[+jsPreError]]\\n            $(\'[[+toCSSBox]]\').html(errorThrown + \': \' + this.url);  \\n            [[+jsPostError]]\\n        },\\n\\t\\tdataType:\'html\'\\n\\t});\\n    [[+jsPostSubmit]]\\n});\\n<\\/script>"}',
        'guid' => '91ad28d2ad24d4439f5a14e35b96a389',
        'native_key' => 3,
        'signature' => '53d1fb7bd647c7150b127cabf585149c',
      ),
    ),
    'Snippets' => 
    array (
      'ec5cbcbf024dc8b49d112c57b616cc6d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"getURLParameters","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * getURLParameters snippet for AJAX Revolution extra\\n *\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\n * Created on 09-05-2012\\n *\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package ajaxrevolution\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * [[+description]]\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package ajaxrevolution\\n **\\/\\/\\/ Initialize Properties\\n    $prefix = !empty($prefix) \\n        ? $prefix\\n        : \'param\';\\n\\/\\/ Initialize System Settings\\n    $paramsKey = $modx->getOption(\'key_params\', null, \'url_params\');\\n\\/\\/ Get the Parameters from Request Array\\n    $params = $_REQUEST[$paramsKey];\\n\\/\\/ Set a Placeholder for each Parameter\\n    foreach ($params as $key => $value)\\n        if (!empty($value))\\n        {   $modx->setPlaceholder($prefix.\'.\'.$key, $value);\\n            if ($debug)\\n                $output .= \'Parameter \'.$key.\' set to placeholder (\'.$prefix.\'.\'.$key.\') with value (\'.$value.\')\';\\n        }\\n        elseif ($debug)\\n            $output .= \'Parameter \'.$key.\' has no value. No placeholder set!\';\\n\\n    \\n\\/\\/ Return nothing\\n    return $output;","locked":0,"properties":"a:2:{s:5:\\"debug\\";a:7:{s:4:\\"name\\";s:5:\\"debug\\";s:4:\\"desc\\";s:48:\\"When set to 1, outputs debug text to the screen.\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:5:\\"Debug\\";}s:6:\\"prefix\\";a:7:{s:4:\\"name\\";s:6:\\"prefix\\";s:4:\\"desc\\";s:110:\\"The prefix to add to all Placeholders created for each URL Parameter. To access the placeholder: [[+prefix.#]]\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"param\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:12:\\"Placeholders\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * getURLParameters snippet for AJAX Revolution extra\\n *\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\n * Created on 09-05-2012\\n *\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package ajaxrevolution\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * [[+description]]\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package ajaxrevolution\\n **\\/\\/\\/ Initialize Properties\\n    $prefix = !empty($prefix) \\n        ? $prefix\\n        : \'param\';\\n\\/\\/ Initialize System Settings\\n    $paramsKey = $modx->getOption(\'key_params\', null, \'url_params\');\\n\\/\\/ Get the Parameters from Request Array\\n    $params = $_REQUEST[$paramsKey];\\n\\/\\/ Set a Placeholder for each Parameter\\n    foreach ($params as $key => $value)\\n        if (!empty($value))\\n        {   $modx->setPlaceholder($prefix.\'.\'.$key, $value);\\n            if ($debug)\\n                $output .= \'Parameter \'.$key.\' set to placeholder (\'.$prefix.\'.\'.$key.\') with value (\'.$value.\')\';\\n        }\\n        elseif ($debug)\\n            $output .= \'Parameter \'.$key.\' has no value. No placeholder set!\';\\n\\n    \\n\\/\\/ Return nothing\\n    return $output;"}',
        'guid' => 'c23bbe4c3c50a1a82d03ed4ea002d1da',
        'native_key' => 1,
        'signature' => 'dba875070e6f438be9e5d514f014b38e',
      ),
    ),
    'Plugins' => 
    array (
      '68c54411851fe01683d44afcfaed5e1e' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"OnNoCustomAliasFound","description":"","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * OnNoCustomAliasFound plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $keyURL = !empty($keyURL) ? $keyURL : $modx->getOption(\'key_request\', null, \'url_actual\');\\n    $keyFound = !empty($keyFound) ? $keyFound : $modx->getOption(\'key_found_resource\', null, \'bool_found\');\\n\\n\\/\\/ Get \\"passed\\" variables\\n    $isFound = empty($_REQUEST[$keyFound])\\n        ? \'false\'\\n        : $_REQUEST[$keyFound];\\n\\/\\/ Only do this if we need to scan.\\n    if ($isFound == \'false\')\\n    {\\/\\/See if a previous plugin has set the URL.\\n        $toURL = !empty($_REQUEST[$keyURL]) \\n            ? $_REQUEST[$keyURL]\\n            : $_SERVER[\'REQUEST_URI\'];\\n        \\n        function findByURL($url, $alias)\\n        {   global $modx;\\n        \\/\\/ Strip the extension\\n            $alias = reset(explode(\'.\',trim($alias)));\\n            \\n            $q = $modx->newQuery\\n            (   \'modResource\',\\n                array\\n                (   \'published\'=>1,\\n                    \'context_key\'=>$modx->context->key,\\n                    \'alias\'=>$alias\\n                )\\n            );\\n            $q->select(array(\'id\',\'alias\'));\\n            $q->limit(25);\\n            $q->prepare();\\n            $matches=$modx->getCollection(\'modResource\',$q);\\n            \\n            foreach($matches as $res)\\n            {   if (!empty($res))\\n                {\\/\\/Align URLs by getting rid of end slashes and extensions\\n                    $chk_url = $modx->makeUrl($res->get(\'id\'));\\n                    $chk_url = preg_replace(\\"\\/\\\\.[\\\\w\\\\-\\\\h]{2,}\\/\\", \\"\\", trim($chk_url, \'\\/\'));\\n                \\/\\/ Now compare the URLs\\n                    if($chk_url == $url)\\n                        return $res->get(\'id\');\\n                }\\n            }\\n            return -1;\\n        }\\n    \\n    \\/\\/ Split the Path Segments\\n        $toPath = explode(\'\\/\', trim($toURL, \'\\/\'));\\n    \\/\\/ Align URLs by getting rid of end slashes and extensions\\n        $toURL = preg_replace(\\"\\/\\\\.[\\\\w\\\\-\\\\h]{2,}\\/\\", \\"\\", trim($toURL, \'\\/\'));\\n\\n    \\/\\/ Get the Resource ID\\n        $toID = findByURL($toURL, end($toPath));\\n    \\/\\/ Forward the client\\n        if ($toID == -1) $_REQUEST[$keyFound] = \'false\';\\n        else\\n        {   $_REQUEST[$keyFound] = \'true\';\\n            $modx->sendForward($toID);\\n        }\\n    }","locked":0,"properties":"","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * OnNoCustomAliasFound plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $keyURL = !empty($keyURL) ? $keyURL : $modx->getOption(\'key_request\', null, \'url_actual\');\\n    $keyFound = !empty($keyFound) ? $keyFound : $modx->getOption(\'key_found_resource\', null, \'bool_found\');\\n\\n\\/\\/ Get \\"passed\\" variables\\n    $isFound = empty($_REQUEST[$keyFound])\\n        ? \'false\'\\n        : $_REQUEST[$keyFound];\\n\\/\\/ Only do this if we need to scan.\\n    if ($isFound == \'false\')\\n    {\\/\\/See if a previous plugin has set the URL.\\n        $toURL = !empty($_REQUEST[$keyURL]) \\n            ? $_REQUEST[$keyURL]\\n            : $_SERVER[\'REQUEST_URI\'];\\n        \\n        function findByURL($url, $alias)\\n        {   global $modx;\\n        \\/\\/ Strip the extension\\n            $alias = reset(explode(\'.\',trim($alias)));\\n            \\n            $q = $modx->newQuery\\n            (   \'modResource\',\\n                array\\n                (   \'published\'=>1,\\n                    \'context_key\'=>$modx->context->key,\\n                    \'alias\'=>$alias\\n                )\\n            );\\n            $q->select(array(\'id\',\'alias\'));\\n            $q->limit(25);\\n            $q->prepare();\\n            $matches=$modx->getCollection(\'modResource\',$q);\\n            \\n            foreach($matches as $res)\\n            {   if (!empty($res))\\n                {\\/\\/Align URLs by getting rid of end slashes and extensions\\n                    $chk_url = $modx->makeUrl($res->get(\'id\'));\\n                    $chk_url = preg_replace(\\"\\/\\\\.[\\\\w\\\\-\\\\h]{2,}\\/\\", \\"\\", trim($chk_url, \'\\/\'));\\n                \\/\\/ Now compare the URLs\\n                    if($chk_url == $url)\\n                        return $res->get(\'id\');\\n                }\\n            }\\n            return -1;\\n        }\\n    \\n    \\/\\/ Split the Path Segments\\n        $toPath = explode(\'\\/\', trim($toURL, \'\\/\'));\\n    \\/\\/ Align URLs by getting rid of end slashes and extensions\\n        $toURL = preg_replace(\\"\\/\\\\.[\\\\w\\\\-\\\\h]{2,}\\/\\", \\"\\", trim($toURL, \'\\/\'));\\n\\n    \\/\\/ Get the Resource ID\\n        $toID = findByURL($toURL, end($toPath));\\n    \\/\\/ Forward the client\\n        if ($toID == -1) $_REQUEST[$keyFound] = \'false\';\\n        else\\n        {   $_REQUEST[$keyFound] = \'true\';\\n            $modx->sendForward($toID);\\n        }\\n    }"}',
        'guid' => 'fe1425408a5e79c81f931f0525e52b51',
        'native_key' => 1,
        'signature' => '2b5c7cfc7a7b70dc2d606dc4de648b8b',
      ),
      'ec9fb0a6fe2e11295d157b3b1bf2cc6b' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"OnGetRequestType","description":"Runs when a page is not found. This will happen whenever false Aliases such as the AJAX Framework is requested. This simply determines if the URL is an AJAX Request or a FULL Page Request. Configured by System Setting (Namespace:modjax).","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * OnGetRequestType plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/$res = $modx->getObject(\'modResource\',array(\'pagetitle\'=>\'onCheckAJAXRequest\'));\\n\\/\\/eval($res->getContent());\\n\\n\\/\\/ Get System Settings\\n    $ajaxAlias = $modx->getOption(\'alias_ajax_page\', null, \'ajax\');\\n    $fullAlias = $modx->getOption(\'alias_degrade\', null, \'full\');\\n    $argsName = $modx->getOption(\'key_params\', null, \'url_params\');\\n    $keyDegrade = $modx->getOption(\'key_degrade\', null, \'url_degrade\');\\n    $keyURL = $modx->getOption(\'key_request\', null, \'url_actual\');\\n\\n    $keyFound = !empty($keyFound) ? $keyFound : $modx->getOption(\'key_found_resource\', null, \' bool_found\');\\n\\n\\/\\/ Get \\"passed\\" variables\\n    $isFound = empty($_REQUEST[$keyFound])\\n        ? \'false\'\\n        : $_REQUEST[$keyFound];\\n\\/\\/ Only do this if we need to scan.\\n    if ($isFound == \'false\')\\n    {\\n    \\/\\/ Get the Request URL\\n        $toURL = !empty($_REQUEST[$keyURL]) \\n            ? $_REQUEST[$keyURL]\\n            : $_SERVER[\'REQUEST_URI\'];\\n    \\/\\/ Remove GET Parameters\\n        $toURL = reset(explode(\'?\', trim($toURL, \'\\/\')));\\n    \\/\\/ Find AJAX Alias and Separate from Parameters\\n        $pieces = explode(\'\\/\'.$ajaxAlias.\'\\/\', trim($toURL, \'\\/\') . \'\\/\');\\n    \\n    \\/\\/Flag as AJAX Alias\\n        $_REQUEST[$keyDegrade] = \'false\';\\n    \\/\\/ Only proceed if Alias was found\\n        if (count($pieces) > 1)\\n        {\\/\\/ Add Parameters to $_REQUEST global variable\\n            $_REQUEST[$argsName] = $pieces[1];\\n        \\/\\/ Set the path to search for Aliases\\n            $_REQUEST[$keyURL] = \'\\/\'. $pieces[0] . \'\\/\';\\n        }\\n        else\\n        {\\/\\/ Find FULL Alias and Separate from Parameters\\n            $pieces = explode(\'\\/\'.$fullAlias.\'\\/\', trim($toURL, \'\\/\') . \'\\/\');\\n        \\/\\/ Only proceed if Alias was found\\n            if (count($pieces) > 1)\\n            {\\/\\/Flag for Template Switch\\n                $_REQUEST[$keyDegrade] = \'true\';\\n            \\/\\/ Add Parameters to $_REQUEST global variable\\n                $_REQUEST[$argsName] = $pieces[1];\\n            \\/\\/ Set the path to search for Aliases\\n                $_REQUEST[$keyURL] = \'\\/\'. $pieces[0] . \'\\/\';\\n            }\\n        }\\n    }","locked":0,"properties":"","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * OnGetRequestType plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/$res = $modx->getObject(\'modResource\',array(\'pagetitle\'=>\'onCheckAJAXRequest\'));\\n\\/\\/eval($res->getContent());\\n\\n\\/\\/ Get System Settings\\n    $ajaxAlias = $modx->getOption(\'alias_ajax_page\', null, \'ajax\');\\n    $fullAlias = $modx->getOption(\'alias_degrade\', null, \'full\');\\n    $argsName = $modx->getOption(\'key_params\', null, \'url_params\');\\n    $keyDegrade = $modx->getOption(\'key_degrade\', null, \'url_degrade\');\\n    $keyURL = $modx->getOption(\'key_request\', null, \'url_actual\');\\n\\n    $keyFound = !empty($keyFound) ? $keyFound : $modx->getOption(\'key_found_resource\', null, \' bool_found\');\\n\\n\\/\\/ Get \\"passed\\" variables\\n    $isFound = empty($_REQUEST[$keyFound])\\n        ? \'false\'\\n        : $_REQUEST[$keyFound];\\n\\/\\/ Only do this if we need to scan.\\n    if ($isFound == \'false\')\\n    {\\n    \\/\\/ Get the Request URL\\n        $toURL = !empty($_REQUEST[$keyURL]) \\n            ? $_REQUEST[$keyURL]\\n            : $_SERVER[\'REQUEST_URI\'];\\n    \\/\\/ Remove GET Parameters\\n        $toURL = reset(explode(\'?\', trim($toURL, \'\\/\')));\\n    \\/\\/ Find AJAX Alias and Separate from Parameters\\n        $pieces = explode(\'\\/\'.$ajaxAlias.\'\\/\', trim($toURL, \'\\/\') . \'\\/\');\\n    \\n    \\/\\/Flag as AJAX Alias\\n        $_REQUEST[$keyDegrade] = \'false\';\\n    \\/\\/ Only proceed if Alias was found\\n        if (count($pieces) > 1)\\n        {\\/\\/ Add Parameters to $_REQUEST global variable\\n            $_REQUEST[$argsName] = $pieces[1];\\n        \\/\\/ Set the path to search for Aliases\\n            $_REQUEST[$keyURL] = \'\\/\'. $pieces[0] . \'\\/\';\\n        }\\n        else\\n        {\\/\\/ Find FULL Alias and Separate from Parameters\\n            $pieces = explode(\'\\/\'.$fullAlias.\'\\/\', trim($toURL, \'\\/\') . \'\\/\');\\n        \\/\\/ Only proceed if Alias was found\\n            if (count($pieces) > 1)\\n            {\\/\\/Flag for Template Switch\\n                $_REQUEST[$keyDegrade] = \'true\';\\n            \\/\\/ Add Parameters to $_REQUEST global variable\\n                $_REQUEST[$argsName] = $pieces[1];\\n            \\/\\/ Set the path to search for Aliases\\n                $_REQUEST[$keyURL] = \'\\/\'. $pieces[0] . \'\\/\';\\n            }\\n        }\\n    }"}',
        'guid' => '87e587436480f946bf7048c5b02b64f3',
        'native_key' => 2,
        'signature' => '9deec79991cecc618dadf5292f594757',
      ),
      '2828e3e8b9519326287da92b3bfe4bb7' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"OnParseURLParameters","description":"Runs directly after OnGetRequestType whenever a page is not found. Places all parameters into the $_REQUEST array at the key specified by the System Setting. (Namespace:modjax)","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * OnParseURLParameters plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $argsName = !empty($argsName) ? $argsName : $modx->getOption(\'key_params\', null, \'url_params\');\\n\\/\\/ Only proceed if a previous plugin has set the URL Params\\n    if (!empty($_REQUEST[$argsName]))\\n    {\\/\\/Split the list of Parameters\\n        $list = explode(\'\\/\', trim($_REQUEST[$argsName], \'\\/\'));\\n    \\/\\/ Reset the REQUEST variable\\n        $_REQUEST[$argsName] = array();\\n    \\/\\/ Add each of the Params to the array\\n        $i = 0;\\n        foreach ($list as $key => $value)\\n        {\\n            $_REQUEST[$argsName][$i] = strval($value);\\n            $i++;\\n        }\\n    }","locked":0,"properties":"","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * OnParseURLParameters plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $argsName = !empty($argsName) ? $argsName : $modx->getOption(\'key_params\', null, \'url_params\');\\n\\/\\/ Only proceed if a previous plugin has set the URL Params\\n    if (!empty($_REQUEST[$argsName]))\\n    {\\/\\/Split the list of Parameters\\n        $list = explode(\'\\/\', trim($_REQUEST[$argsName], \'\\/\'));\\n    \\/\\/ Reset the REQUEST variable\\n        $_REQUEST[$argsName] = array();\\n    \\/\\/ Add each of the Params to the array\\n        $i = 0;\\n        foreach ($list as $key => $value)\\n        {\\n            $_REQUEST[$argsName][$i] = strval($value);\\n            $i++;\\n        }\\n    }"}',
        'guid' => '187a3bce357e33cc3444a23f3794a79d',
        'native_key' => 3,
        'signature' => '01fe91882644e17d7435c89ebc13d2f7',
      ),
      '424f1b62fcc01df6f0f53ae07ca39b33' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":4,"source":0,"property_preprocess":0,"name":"OnDegradeGracefully","description":"Runs whenever a page is loaded from the database or the site cache. Simply determines whether or not an AJAX Page should switch its Template to another Template. Configured by System Settings (Namespace:modjax)","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * OnDegradeGracefully plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $keyDegrade = !empty($keyDegrade) ? $keyDegrade : $modx->getOption(\'key_degrade\', null, \'url_degrade\');\\n    $idDegradeTo = !empty($idDegradeTo) ? $idDegradeTo : $modx->getOption(\'degrade_to_template\', null, 1);\\n    $keyURL = $modx->getOption(\'key_request\', null, \'url_actual\');\\n\\n\\/\\/ Determine if we were told to switch\\n    $toURL = $_REQUEST[$keyURL];\\n    $switch = $_REQUEST[$keyDegrade];\\n\\n\\/\\/Get the System Event\\n    $eventName = $modx->event->name;\\n    switch($eventName) {\\n        case \'OnLoadWebDocument\':\\n            if (!empty($switch))\\n            {\\/\\/Refresh the Cache\\n                $modx->getCacheManager()->refresh(array(\\n                        \'auto_publish\' => array(\'contexts\' => array($modx->context->key)),\\n                        \'context_settings\' => array(\'contexts\' => array($modx->context->key)),\\n                        \'resource\' => array(\'contexts\' => array($modx->context->key), \'ids\'=> array($modx->resource->get(\'id\'))),\\n                 )   );\\n                \\/\\/$modx->reloadContext($modx->context->key);\\n                if ($switch == \'true\')\\n                {\\/\\/Switch the template\\n                    $modx->resource->set(\'template\', $idDegradeTo);\\n                    $_REQUEST[$keyDegrade] = \'false\';\\n                    $switch = \'false\';\\n                }\\n            }\\n            break;\\n        case \'OnLoadWebPageCache\':\\n            if (!empty($switch))\\n            {\\n                if (!empty($modx->resource))\\n                {\\n                    $modx->getCacheManager()->refresh(array(\\n                            \'auto_publish\' => array(\'contexts\' => array($modx->context->key)),\\n                            \'context_settings\' => array(\'contexts\' => array($modx->context->key)),\\n                        \\t\'resource\' => array(\'contexts\' => array($modx->context->key), \'ids\'=> array($modx->resource->get(\'id\'))),\\n                     )   );\\n                    \\/\\/$modx->reloadContext($modx->context->key);\\n                    if ($switch == \'true\')\\n                    {\\/\\/ Re-Forward\\n                            $modx->sendForward($modx->resource->get(\'id\'));\\n                    }\\n                }\\n            }\\n            break;\\n    }","locked":0,"properties":"","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * OnDegradeGracefully plugin for AJAX Revolution extra\\r\\n *\\r\\n * Copyright 2012 by Donald Atkinson (aka Fuzzical Logic) fuzzicallogic@gmail.com\\r\\n * Created on 09-05-2012\\r\\n *\\r\\n* AJAX Revolution is free software; you can redistribute it and\\/or modify it under the\\r\\n * terms of the GNU General Public License as published by the Free Software\\r\\n * Foundation; either version 2 of the License, or (at your option) any later\\r\\n * version.\\r\\n *\\r\\n * AJAX Revolution is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * AJAX Revolution; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n *\\/\\r\\n\\r\\n\\/**\\r\\n * Description\\r\\n * -----------\\r\\n * [[+description]]\\r\\n *\\r\\n * Variables\\r\\n * ---------\\r\\n * @var $modx modX\\r\\n * @var $scriptProperties array\\r\\n *\\r\\n * @package ajaxrevolution\\r\\n **\\/\\/\\/Get the System Settings (if we haven\'t already...)\\n    $keyDegrade = !empty($keyDegrade) ? $keyDegrade : $modx->getOption(\'key_degrade\', null, \'url_degrade\');\\n    $idDegradeTo = !empty($idDegradeTo) ? $idDegradeTo : $modx->getOption(\'degrade_to_template\', null, 1);\\n    $keyURL = $modx->getOption(\'key_request\', null, \'url_actual\');\\n\\n\\/\\/ Determine if we were told to switch\\n    $toURL = $_REQUEST[$keyURL];\\n    $switch = $_REQUEST[$keyDegrade];\\n\\n\\/\\/Get the System Event\\n    $eventName = $modx->event->name;\\n    switch($eventName) {\\n        case \'OnLoadWebDocument\':\\n            if (!empty($switch))\\n            {\\/\\/Refresh the Cache\\n                $modx->getCacheManager()->refresh(array(\\n                        \'auto_publish\' => array(\'contexts\' => array($modx->context->key)),\\n                        \'context_settings\' => array(\'contexts\' => array($modx->context->key)),\\n                        \'resource\' => array(\'contexts\' => array($modx->context->key), \'ids\'=> array($modx->resource->get(\'id\'))),\\n                 )   );\\n                \\/\\/$modx->reloadContext($modx->context->key);\\n                if ($switch == \'true\')\\n                {\\/\\/Switch the template\\n                    $modx->resource->set(\'template\', $idDegradeTo);\\n                    $_REQUEST[$keyDegrade] = \'false\';\\n                    $switch = \'false\';\\n                }\\n            }\\n            break;\\n        case \'OnLoadWebPageCache\':\\n            if (!empty($switch))\\n            {\\n                if (!empty($modx->resource))\\n                {\\n                    $modx->getCacheManager()->refresh(array(\\n                            \'auto_publish\' => array(\'contexts\' => array($modx->context->key)),\\n                            \'context_settings\' => array(\'contexts\' => array($modx->context->key)),\\n                        \\t\'resource\' => array(\'contexts\' => array($modx->context->key), \'ids\'=> array($modx->resource->get(\'id\'))),\\n                     )   );\\n                    \\/\\/$modx->reloadContext($modx->context->key);\\n                    if ($switch == \'true\')\\n                    {\\/\\/ Re-Forward\\n                            $modx->sendForward($modx->resource->get(\'id\'));\\n                    }\\n                }\\n            }\\n            break;\\n    }"}',
        'guid' => '56be09b25c10c62655fd23cd3dd66060',
        'native_key' => 4,
        'signature' => '26c7b248d2c2ff43674fdf1fd8b569b4',
      ),
    ),
    'Templates' => 
    array (
      '457b077a4546443f36a927409620d106' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'templatename',
        'class' => 'modTemplate',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"templatename":"AJAX Partial HTML","description":"Template for AJAX Requests that will result in Partial HTML. Simply returns the content of the Resource. OnDegradeGracefully Plugin will handle cached and non-cached resources.","editor_type":0,"category":0,"icon":"","template_type":0,"content":"[[- This is a Partial HTML File. This is what will be returned to your AJAX Request. \\n    In general, it is best if this is not modified. All specially formatted AJAX pages\\n    may be handled by the Resource, itself.]]\\n[[*content]]","locked":0,"properties":"","static":0,"static_file":""}',
        'guid' => 'fd10860c53e28fa62b3cd145cf631f60',
        'native_key' => 1,
        'signature' => 'f342ed98119ef55d89a6f2ff2edfc240',
      ),
    ),
  ),
  'abort_install_on_vehicle_fail' => true,
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Templates' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'templatename',
    ),
  ),
  'namespace' => 'AJAX Revolution',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"ajaxrevolution-1.0.8-rc-1\\/modCategory\\/33062d4d3a723db76d4377e26b2a971a.ajaxrevolution.resolver.resolver","type":"php","name":"ajaxrevolution.resolver"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"ajaxrevolution-1.0.8-rc-1\\/modCategory\\/33062d4d3a723db76d4377e26b2a971a.fixLoadOrder.resolver.resolver","type":"php","name":"fixLoadOrder.resolver"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"ajaxrevolution-1.0.8-rc-1\\/modCategory\\/33062d4d3a723db76d4377e26b2a971a.plugin.resolver.resolver","type":"php","name":"plugin.resolver"}',
    ),
    3 => 
    array (
      'type' => 'file',
      'body' => '{"source":"ajaxrevolution-1.0.8-rc-1\\/modCategory\\/33062d4d3a723db76d4377e26b2a971a\\/3\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"ajaxrevolution"}',
    ),
  ),
  'validate' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"ajaxrevolution-1.0.8-rc-1\\/modCategory\\/33062d4d3a723db76d4377e26b2a971a.ajaxrevolution.validator.validator","type":"php","name":"ajaxrevolution.validator"}',
    ),
  ),
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '12c7f8778563b754f73664c67281efd8',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '33062d4d3a723db76d4377e26b2a971a',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"AJAX Revolution"}',
);